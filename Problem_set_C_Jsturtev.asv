%% 13.7
% With these eigenvalues, I would partition the graph as follow
% {{9, 4, 10, 5},{3, 6, 7, 12}, {2, 1, 8, 11}}
v = [0.37 0.23, -0.12 -0.34 -0.28 -0.04, -0.03, 0.42 -0.36 -0.34 0.42 0.06]';
sortrows(horzcat(v,[1:size(v)]'))
A = createadjacency([9 4; 4 5; 5 10; 10 9; 3 6; 3 7; 7 12; 6 12; 2 1; 1 8; 8 11; 11 1],12);
G = graph(A);
plot(G,'LineWidth',3)
%% 13.11
L = createlaplacian([1 2; 2 3; 3 4; 4 5; 1 5], 5);
[V, D] = eig(L);
V1 = V(1:5, 2);
V2 = V(1:5, 3);
% First, looking at just the two vectors individually, the splits would be
% {{1, 2}, {3, 4, 5}} and {{1, 5}, {2, 3, 4}}
% Next, it makes sense to do simple linear combinations to get all possible
% combinations of partitions
% Adding & subtracting with no scaling
V1 + V2; % Gives the new {{1, 2, 5}, {3,4}} partition
-V1 + V2; % Gives the new {{1, 4, 5}, {2,3}} partition
% Adding & subtracting with scalars
2*V1 + V2 % Nothing new
-2*V1 + V2 % Gives the new {{1, 2, 3}, {4, 5}} partition
% Intuitively, there are 10 (5 choose 2) possible ways to make 2 cuts on
% this graph, half of them will be causing a 4-1 split, so we should only
% have 5 partitions, so we have identified all possibilities
%% 13.21
% a)
figure(1)
imshow('13_11_Map_A.png')
A = createadjacency([1 2; 1 3; 1 4; 1 5; 2 4; 2 8; 3 5; 3 6; 4 5; 4 7; 4 8; 5 6; 5 7; 6 7; 7 8], 8);
G = graph(A);
figure(2)
plot(G,'LineWidth',3)
% b) The Fiedler Method causes the follow splits {{2, 4, 8}, {3, 5, 6}} and
% allows 1 and 7 to be placed in either partition. Logically, only one of
% these countries should be in each partition. E.g. {{1, 2, 4, 8}, {3, 5,
% 6, 7}}
L = createlaplacian([1 2; 1 3; 1 4; 1 5; 2 4; 2 8; 3 5; 3 6; 4 5; 4 7; 4 8; 5 6; 5 7; 6 7; 7 8], 8);
[V, D] = eig(L);
V1 = V(1:8, 2)
% c) In terms of the map, the Fiedler method is trying to split the
% countries into East and West sections. Depending on how country 1 and 7
% are assigned, the split willl be more of a North-East South-West split or
% a South-East North-West split.
% d)
figure(3)
imshow('13_11_Map_D.png')
%% 14.1
C = [1 0 1 1 0 1 0 0 0 1 0 1 0 0 1 0 1]';
K = [1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0]';
E = mod(C + K, 2)
%% 14.3
% The key length for this recursively defined sequence is 15
k = genkey([1 1 0 0]', [1 0 0 1]', 30)
%% 14.6
M_2 = genmatrixfromfragment([0 0 1 1 1 0 1 0 0 1]', 2)
k = mod(inv(M_2)*[1 1]', 2)
% No solution for 2, so doesn't work
M_3 = genmatrixfromfragment([0 0 1 1 1 0 1 0 0 1]', 3)
k = mod(inv(M_3)*[1 1 0]', 2)
mod([1 1 0; 1 0 1; 0 1 0; 1 0 0]*k,2)
% This key provides the correct answer for k = 7,..,10, so it is likely
% correct
%% 14.10
x = [0 1 1 1 1 0 0 0 0 1 0 1 1 1 0 1 0 1 0 1]';
for m=1:10
    mod(round(det(genmatrixfromfragment(x,m))),2)
end
% This makes it seem like m = 6 will give the correct answer
M = genmatrixfromfragment(x,6);
c = mod(round(det(M)*inv(M)*x(7:12)),2)
norm(genkey(x(1:6),c,length(x)) - x)
% Since the norm is 0, then it seems we have a match, 